{"ast":null,"code":"import { HEROES } from './mock-heroes'; //we want getHeroes to return an observable\n//Angular httpclient.get() function which we want to use returns an observable\n//necessary to use this to utilize asynch return, instead of unreliable synch return\n\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nexport class HeroService {\n  //adding a message service to the hero service\n  constructor(messageService) {\n    this.messageService = messageService;\n  }\n  /* THIS IS A SYNCHRONOUS OPERATION\r\n    getHeroes(): Hero[] {\r\n      return HEROES;\r\n    }\r\n  */\n  //Better Asynch operation\n\n\n  getHeroes() {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n\n}\n\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.MessageService));\n};\n\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/angular-tour-of-heroes/src/app/hero.service.ts"],"names":["HEROES","of","i0","i1","HeroService","constructor","messageService","getHeroes","heroes","add","getHero","id","hero","find","h","ɵfac","HeroService_Factory","t","ɵɵinject","MessageService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"AAAA,SAASA,MAAT,QAAuB,eAAvB,C,CACA;AACA;AACA;;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrB;AACAC,EAAAA,WAAW,CAACC,cAAD,EAAiB;AACxB,SAAKA,cAAL,GAAsBA,cAAtB;AACH;AACD;AACJ;AACA;AACA;AACA;AACI;;;AACAC,EAAAA,SAAS,GAAG;AACR,UAAMC,MAAM,GAAGP,EAAE,CAACD,MAAD,CAAjB;AACA,SAAKM,cAAL,CAAoBG,GAApB,CAAwB,6BAAxB;AACA,WAAOD,MAAP;AACH;;AACDE,EAAAA,OAAO,CAACC,EAAD,EAAK;AACR;AACA;AACA,UAAMC,IAAI,GAAGZ,MAAM,CAACa,IAAP,CAAYC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASA,EAA1B,CAAb;AACA,SAAKL,cAAL,CAAoBG,GAApB,CAAyB,gCAA+BE,EAAG,EAA3D;AACA,WAAOV,EAAE,CAACW,IAAD,CAAT;AACH;;AAtBoB;;AAwBzBR,WAAW,CAACW,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIb,WAAV,EAAuBF,EAAE,CAACgB,QAAH,CAAYf,EAAE,CAACgB,cAAf,CAAvB,CAAP;AAAgE,CAArH;;AACAf,WAAW,CAACgB,KAAZ,GAAoB,aAAclB,EAAE,CAACmB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAElB,WAAT;AAAsBmB,EAAAA,OAAO,EAAEnB,WAAW,CAACW,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { HEROES } from './mock-heroes';\r\n//we want getHeroes to return an observable\r\n//Angular httpclient.get() function which we want to use returns an observable\r\n//necessary to use this to utilize asynch return, instead of unreliable synch return\r\nimport { of } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./message.service\";\r\nexport class HeroService {\r\n    //adding a message service to the hero service\r\n    constructor(messageService) {\r\n        this.messageService = messageService;\r\n    }\r\n    /* THIS IS A SYNCHRONOUS OPERATION\r\n      getHeroes(): Hero[] {\r\n        return HEROES;\r\n      }\r\n    */\r\n    //Better Asynch operation\r\n    getHeroes() {\r\n        const heroes = of(HEROES);\r\n        this.messageService.add('HeroService: fetched heroes');\r\n        return heroes;\r\n    }\r\n    getHero(id) {\r\n        // For now, assume that a hero with the specified `id` always exists.\r\n        // Error handling will be added in the next step of the tutorial.\r\n        const hero = HEROES.find(h => h.id === id);\r\n        this.messageService.add(`HeroService: fetched hero id=${id}`);\r\n        return of(hero);\r\n    }\r\n}\r\nHeroService.ɵfac = function HeroService_Factory(t) { return new (t || HeroService)(i0.ɵɵinject(i1.MessageService)); };\r\nHeroService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HeroService, factory: HeroService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}